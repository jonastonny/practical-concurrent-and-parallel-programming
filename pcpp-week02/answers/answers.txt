ANSWERS WEEK 2

2.1.1
Time: 9.52 seconds

2.1.2
See MyAtomicInteger.java

2.1.3
Yes, we still get the answer 18703729
Time: 4.69 seconds

Code:
See TestCountFactors.java:17

2.1.4
The answer is slight off with a result (example) 18358032.

The semantics of volatile are not strong enough to make the increment operation atomic, unless it's possible to guarantee that a given variable is written only from a single thread (Goetz, 2006, p. 39). Since we use a simple increment, this operation fails according to Goetz (2006).

2.1.5
Time: 4.65 seconds
There's no noticeable difference in time compared to the time measured in 2.1.3.
The result is the same as well, even though AtomicInteger uses a volatile variable to synchronize it's value.

The AtomicInteger object should be final, because you don't want to change the object. Instead you want to change a variable inside the object. Declaring an AtomicInteger object final is good practice and avoids mistakes.

Code:
See TestCountFactors.java:45

2.2.1
Since the value stored in OneValueCache is immutable and the value is overwritten by making a new OneValueCache object, then it's important to declare the cache field volatile. Goetz (2006, pp. 48-49) writes: "With a mutable holder obecjt, you would have to use locking to ensure atomicity; with an immutable one, once a thread acquires a reference to it, it need never worry about another thread modifying its sate."
By making the cache volatile, we ensure, that the most recent write by any thread is always returned (Goetz, 2006, p. 38).

2.2.2
It's important that the fields are declared final in order to guarantee initilization safety (Goetz, 2006, p. 51). 

2.3.1
Code:
See SimpleHistogram.java

The 'counts' field is declared final in order to guarantee that the field is not initialized with a new array.
increment() needs to be synchronized because it changes mutable bins in the array.
getCount() needs to be synchronized as well in order to get the correct value from the bins. If we assume that only dump() uses getCount() (according to the description), then it doesn't need to be synchronized, but since it's a public method it would be best practice to declare the method synchronized.
getSpan() doesn't need to be synchronized because the length of counts is immutable anyways. 

2.3.2
See SimpleHistogram.java

2.3.3
See SimpleHistogram.java

2.3.4
The results are correct.
Code: See SimpleHistrogram.java

2.3.5
Code: See SimpleHistogram.java

getBins() in Histogram2:
The result is a fixed snapshot

getBins() in Histogram3:
The result is a fixed snapshot

getBins() in Histogram4:
The result is a fixed snapshot

2.3.6
Code: See SimpleHistogram.java

2.4.1
Code: See TestCache.java

2.4.2
class Memoizer1
115000

real	0m16.135s
user	0m16.363s
sys		0m0.452s

2.4.3
class Memoizer2
224838

real	0m8.858s
user	0m56.589s
sys		0m0.184s



2.4.4
class Memoizer3
117192

real	0m7.304s
user	0m22.164s
sys		0m1.346s

2.4.5
class Memoizer4
115000

real	0m7.276s
user	0m21.817s
sys		0m1.222s

2.4.6
class Memoizer5
115000

real	0m7.377s
user	0m21.995s
sys	0m1.480s

2.4.7
Code: See TestCache.java
JLO: Kør tid på den